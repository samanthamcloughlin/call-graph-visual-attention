-> Project: "freecol"

-> For each method listed below:
	Step 1: "Start Tracking" on the itrace core as described to you by the study administrator.
	Step 2: Navigate to the method described using the path, method name, and line number; then inspect the project to understand the context as described in the instructions.
	Step 3: Write the description in the space provided. 
	Step 4: When satisfied with the description, "Stop Tracking" in the itrace core.
	Step 5: Move to the next method and repeat steps 1-4. Please, DO NOT edit any project files or source code.


-----------------------------------------------------------------------------------------------------
| 										Project Synopsis:  											|
| 	FreeCol:  FreeCol is a turn-based strategy game based on the old game Colonization, 			|
|	and similar to Civilization. The objective of the game is to create an independent nation.		|
-----------------------------------------------------------------------------------------------------

#####################################---CALIBRATION REQUIRED---####################################
-----------------------------------------------------------------------------------------------------
|   Note: Start a new tracking session.
-----------------------------------------------------------------------------------------------------

	Method 1: freecol>tools>FlagTest.java> SetColors [line 209]
	Description:
	
	This method seems to set the colors of a flag instance and its corresponding decorations/stars/background.
	
	It does this by calling set methods from the Flag.java file for the main colors, and then iterating through a list of background colors and setting them.
	
	This method is important in setting the appropriate colors of flag, which is important in a game all about countries.
	
	Rate your confidence in the description on a scale of 1-5: 
	
	3
	

-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 2: freecol>common>io>FreeColXMLReader.java> readId [line 219]
	Description:

	This method returns the ID of a game object.
	
	It does this by getting the ID attribute of a game object, then (assuming that id is in the form string:string) it labels the given game object as
	a tileimprovement or tileitemcontainer to put the id in the correct format.
	
	This method seems important in reading the ID's of game objects declared in xml files, which allows the program to interact with each individual object.

	Rate your confidence in the description on a scale of 1-5: 

	5


-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 3: freecol>common>model>FreeColObject.java> compareIds [line 148]
	Description:

	This method compares the ID's of two FreeCol objects and returns 1 if they were the same and 0 if not.
	
	It does this by accepting 2 objects, and if both (or their ids) are null it returns 0, if object 1 or its id is null it returns -1, and if object 2 or 
	its id is null it returns 1 - similar logic applies if they are not null.
	
	This method is important in comparing the types of two game objects, which seems to be used in comparing locations.

	Rate your confidence in the description on a scale of 1-5: 	

	5


-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 4: freecol>common>model>pathfinding>CostDeciders.java> getCost [line 198]
	Description:

	This method accepts a unit, the location it is moving from, the location it is going to, and the number of moves left, and returns the cost of moving
	that unit.
	
	It does this by accepting all parameters, iterating through the cost deciders array, checking if the proposed move is valid, setting variables to 
	be used for getting the number of moves left and new turns, and then finally returning the cost.
	
	This method is important in deciding the costs of units on the board and determining if certain moves are valid or not.

	Rate your confidence in the description on a scale of 1-5: 
	
	4
	
	
-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session |
-----------------------------------------------------------------------------------------------------
#####################################-RE-CALIBRATION REQUIRED---####################################
-----------------------------------------------------------------------------------------------------
|   Note: Start a new tracking session |
-----------------------------------------------------------------------------------------------------

	Method 5: freecol>server>FreeColServer.java> changeServerState [line 349]
	Description:

	This method changes the server state depending on the state of the game - it allows input to be handled appropriately when the game is ongoing/starting, 
	and it stops when the game ends.
	
	It does this by getting the server state, then changing the call to setMessageHandler for all connections depending on what state the game is in using a 
	switch case statement.
	
	This method is important in maintaining the server and accepting inputs from all connections while the game is starting/ongoing, then stopping the server
	appropriately when the game ends.

	Rate your confidence in the description on a scale of 1-5: 
	
	5
	
	
-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------


	Method 6: freecol>client>gui>SwingGUI.java> updateUnitPath [line 443]
	Description:

	This method updates the active unit's path on the map based on the unit's current location and proposed destination.
	
	It does this by obtaining the active unit, getting the destination, checking if the destination is valid and then finding a path to it - after all this, 
	it sets the unit's path provided no errors were found in finding a path.
	
	This method seems important in determining where a unit will move after proposing a destination for it to move to, which is vital in a strategy game.

	Rate your confidence in the description on a scale of 1-5: 
	
	4
	
	
-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------



	Method 7: freecol>client>gui>mapviewer>CanvasMapViewer.java> drawRenderingTimeStrings [line 121]
	Description:

	This method seems to print out the fps/rendering times for rendering the main map in the game.
	
	It does this by setting the font color to white and calculating the total render time, last full map render time, and the average full map render time -
	it then uses these new variables to print the appropriate information on the screen.
	
	This method allows the user to look at the render time stats while playing the game, which is important in letting the user determine how well the game
	performs on his/her computer.

	Rate your confidence in the description on a scale of 1-5: 
	
	5
	
	
-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 8: freecol>common>model>Monarch.java> initializeCaches [line 209]
	Description:

	This method sets up a cache for each type of unit that the monarch (which i assume is the player character?) has and the actions the monarch can do.
	
	It does this by initializing arrays for each type of unit the monarch can use, then iterating through each unit type and each military role (the actions 
	the monarch can perform) - it then adds all unit types to their respective arrays, and sets up the military roles appropriately.
	
	This method is important in determining the actions a player can make without taking too many computational resources - with this, all actions and units
	are cached to be used in other functions quickly.

	Rate your confidence in the description on a scale of 1-5: 
	
	4
	

	
Congratulations, you have completed the project! Please remember to "Stop Tracking".

Please describe any issues you faced while completing tasks for this project:



Please call the administrator!
