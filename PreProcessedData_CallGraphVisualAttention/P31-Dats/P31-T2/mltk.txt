
 Project: "MLTK"

-> For each method listed below:
	Step 1: "Start Tracking" on the itrace core as described to you by the study administrator.
	Step 2: Navigate to the method described using the path, method name, and line number; then inspect the project to understand the context as described in the instructions.
	Step 3: Write the description in the space provided. 
	Step 4: When satisfied with the description, "Stop Tracking" in the itrace core.
	Step 5: Move to the next method and repeat steps 1-4. Please, DO NOT edit any project files or source code.

-----------------------------------------------------------------------------------------------------
Project Synopsis: MLTK (Machine Learning Tool Kit) is a collection of various supervised machine 
learning algorithms, which is designed for directly training models and further development.
-----------------------------------------------------------------------------------------------------
	
#####################################---CALIBRATION REQUIRED---####################################
-----------------------------------------------------------------------------------------------------
|   Note: Start a new tracking session.
-----------------------------------------------------------------------------------------------------


	Method 1: core>processor>Discretizer.java> computeBins [line 122]
	Description:

	This method groups a list of elements into separate bins based on a specified maximum number of bins. It does so
	using a helper method getStats that accumulates elements of same weight into bins; if more bins than max bins are found
	new bins are created by calculating bin size and making adjustments. This method is used to discretize data used
	for training purposes.

	Rate your confidence in the description on a scale of 1-5:

	4

-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 2: core>io>InstancesReader.java> parseDenseInstance [line 159]
	Description:

	This method is used to parse a line of data from string to doubles, specifically an "Instance." It does so by iterating
	through a delimited string and parsing them as doubles and returning a new Instance; if a classIndex is specified the value
	at that index is extracted as a target for the new Instance created. This method is used for reading data from a string file
	and returning Instances.
	
	Rate your confidence in the description on a scale of 1-5:

	4

-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 3: core>processor>InstancesSplitter.java> split [line 286]
	Description:
	
	This method splits a dataset of Instances into multiple datasets based on ratios determining the distribution of elements in
	the new datasets. The method does so by creating an array of Instances of the number of ratios, initializes the attributes of
	each of them, and then adds the appropriate number of elements to each partition from a shuffled version of the initial dataset.
	This method appears to be used to split a dataset for use in validation.
		
	Rate your confidence in the description on a scale of 1-5:

	5

-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 4: predictor>tree>RTreeLearner.java> getStats [line 64]
	Description: 
	
	This method is used to calculate stats of several instances such as their total weights, sum, and weighted mean. This is done by
	iterating through all the instances and having a running counter of the total weight and sum; the method returns a boolean 
	indicating whether the standard deviation is 0 or not. This method appears to be used in building regression trees or nodes
	in initializing their attributes.

	Rate your confidence in the description on a scale of 1-5:

	4

-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session.
-----------------------------------------------------------------------------------------------------
#####################################-RE-CALIBRATION REQUIRED---####################################
-----------------------------------------------------------------------------------------------------
|   Note: Start a new tracking session.
-----------------------------------------------------------------------------------------------------

	Method 5: util>OptimUtils.java> fitIntercept [line 108]
	Description:

	This method uses the residuals for each prediction to calculate eta and theta, use those to find delta and make adjustments
	to the predictions by adding the calculated delta to each value. This is done by iterating through residuals to calculate eta
	and theta and then adding to prediction and computing pseudo residual using the new predictions. This method is used in building
	binary classifiers to find the intercept and for finding pseudo residuals in other places.

	Rate your confidence in the description on a scale of 1-5:

	4

-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------
	
	Method 6: predictor>gam>SPLAMLearner.java> computeGradient [line 1025]
	Description:

	This method is used to compute the gradients of some blocks of data by multiplying it with an rTrain element which is picked using
	an index array. The method iterates over all blocks, initializes the gradient for that block to 0, and then calculates the gradient
	for that block by multiplying each element with some element in rTrain. This method appears to be used in doing one pass through the
	data for building a regressor. 
		
	Rate your confidence in the description on a scale of 1-5:

	4

-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------
	
	Method 7: core>BinnedAttribute.java> parse [line 66]
	Description:
	
	This method parses a string to extract information about a BinnedAttribute and return a new instance of it. The string is first split
	on ": " to get the name of the attribute and its data; from the data the number of bins is extracted, if more than one the parseDoubleArray
	helper method is used to find the boundaries and medians of the bins from the string and create a BinnedAttribute using those. This method is
	used while reading the attributes of some file.
		
	Rate your confidence in the description on a scale of 1-5:

	5

-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 8: predictor>tree>TreeInteriorNode.java> write [line 76]
	Description:
		
	This method is used to print debugging information about an interior node of a tree. It accepts a PrintWriter out and prints the class name,
	attIndex and splitPoint attribute before recursively calling the same method on the left node and right node; this leads to an in-order printing
	of information in the tree nodes. This method is used to print information for various data structures like Regressors, Classifiers and RTrees.
		
	Rate your confidence in the description on a scale of 1-5:
	
	5

	
Congratulations, you have completed the project! Please remember to "Stop Tracking".

Please describe any issues you faced while completing tasks for this project:



Please call the administrator!
