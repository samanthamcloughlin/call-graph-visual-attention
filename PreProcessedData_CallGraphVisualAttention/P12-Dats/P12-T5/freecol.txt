-> Project: "freecol"

-> For each method listed below:
	Step 1: "Start Tracking" on the itrace core as described to you by the study administrator.
	Step 2: Navigate to the method described using the path, method name, and line number; then inspect the project to understand the context as described in the instructions.
	Step 3: Write the description in the space provided. 
	Step 4: When satisfied with the description, "Stop Tracking" in the itrace core.
	Step 5: Move to the next method and repeat steps 1-4. Please, DO NOT edit any project files or source code.


-----------------------------------------------------------------------------------------------------
| 										Project Synopsis:  											|
| 	FreeCol:  FreeCol is a turn-based strategy game based on the old game Colonization, 			|
|	and similar to Civilization. The objective of the game is to create an independent nation.		|
-----------------------------------------------------------------------------------------------------

#####################################---CALIBRATION REQUIRED---####################################
-----------------------------------------------------------------------------------------------------
|   Note: Start a new tracking session.
-----------------------------------------------------------------------------------------------------

	Method 1: freecol>tools>FlagTest.java> SetColors [line 209]
	Description:
	This method sets the color of a flag for its four attributes: union, star, decoration, and background.
	
	It is first set the color of a flag for its union, star, and decoration, and then set the background by looping through the color in the background color list.
	
	This method is useful if you want to set the flag color for different attributes.
	
	
	Rate your confidence in the description on a scale of 1-5: 5
	
	

-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 2: freecol>common>io>FreeColXMLReader.java> readId [line 219]
	Description:
	This method reads id from a given string.
	
	It first ensures the given string is not null, then it splits the string by ":", gets the prefix and id, identify if the prefix string between 0 to the index is "tileItemContainer" or "tileImprovement", and finally it concatenates the corresponding prefix to the id.
	
	This method is useful when you want to get a id from a string and check if the prefix is valid.


	Rate your confidence in the description on a scale of 1-5: 5



-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 3: freecol>client>gui>SwingGUI.java> updateUnitPath [line 443]
	Description:
	This method is to update the unit path.
	
	It first gets an active unit and checks its destination, if the destination is neither null nor disposed and the unit is not at the destination, then it finds the path to the destination for the active unit and catch the errors in the path finding process and then set the destination as null.
	
	This method is useful when want to find a path to the destination for an active unit. 


	Rate your confidence in the description on a scale of 1-5: 	5



-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 4: freecol>server>FreeColServer.java> changeServerState [line 349]
	Description:
	This method changes the server state based on its current state.
	
	It first gets the current state of the server, and if the current state is PER_GAME, LOAD_GAME, or IN_GAME, then it sends the input handler as the message to all the connections of the server, while if the current state is END_GAME, then it sends null as the message to all the connections of the server.
	
	This method is useful when you want to update the server state based on its current state and send the update to all the connections with the server.
	


	Rate your confidence in the description on a scale of 1-5: 5
	
	
	
-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session |
-----------------------------------------------------------------------------------------------------
#####################################-RE-CALIBRATION REQUIRED---####################################
-----------------------------------------------------------------------------------------------------
|   Note: Start a new tracking session |
-----------------------------------------------------------------------------------------------------

	Method 5: freecol>common>model>pathfinding>CostDeciders.java> getCost [line 198]
	Description:
	This method returns the move cost of a given unit based on its old location and new location.
	
	It identifies the move cost for the given unit, if a move is illegal or infinity then it returns illegal move, otherwise if the cost is larger than -1 then it returns the move cost itself.
	
	This method is useful when you want to check whether a move cost is illegal and get the cost of the move.


	Rate your confidence in the description on a scale of 1-5: 5
	
	
	
-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------


	Method 6: freecol>common>model>FreeColObject.java> compareIds [line 148]
	Description:
	This method compares the ids of two free col objects.
	
	It first check if the free col objects or their ids are null, if both objects are null or both ids are null then it returns 0, if only the free col object 1 or its id is null or the object 2's id is larger than object 1's then it returns -1, otherwise, if only the free col object 2 or its id is null or the object 1's id is larger than object 2's then it returns 1.
	
	This method is useful when you want to detect whether two free col objects ids are null and compare their ids.


	Rate your confidence in the description on a scale of 1-5: 5
	
	
	
-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------



	Method 7: freecol>client>gui>mapviewer>CanvasMapViewer.java> drawRenderingTimeStrings [line 121]
	Description:
	This method draws the average and the last full map rendering time and last rendering time.
	
	It first calculates the last rendering time by subtracting current system time with the starting time, then if it is full map rendered with using back buffer, it calculate the average full map render time, and finally output the average and the last full map rendering time and last rendering time in the unit of frame per second.
	
	This method is useful when you want to draw the rendering time of a full map.  


	Rate your confidence in the description on a scale of 1-5: 4
	
	
	
-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 8: freecol>common>model>Monarch.java> initializeCaches [line 209]
	Description:
	This method initializes all type of units in a monarch.
	
	It initializes the naval, bombard, land, and mercenary unit of a monarch, add unit type for each unit, and finally initialize the military roles for armed or mounted types. 
	
	This method is useful when you want to initialize the unit types and military roles of a monarch.


	Rate your confidence in the description on a scale of 1-5: 4
	
	
	

	
Congratulations, you have completed the project! Please remember to "Stop Tracking".

Please describe any issues you faced while completing tasks for this project:



Please call the administrator!
