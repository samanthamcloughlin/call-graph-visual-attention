-> Project: "openaudible"

-> For each method listed below:
	Step 1: "Start Tracking" on the itrace core as described to you by the study administrator.
	Step 2: Navigate to the method described using the path, method name, and line number; then inspect the project to understand the context as described in the instructions.
	Step 3: Write the description in the space provided. 
	Step 4: When satisfied with the description, "Stop Tracking" in the itrace core.
	Step 5: Move to the next method and repeat steps 1-4. Please, DO NOT edit any project files or source code.


-----------------------------------------------------------------------------------------------------
| 				     Project Synopsis:  					    |
| 					OpenAudible						    |
|	  A cross-platform desktop application for downloading and managing your Audible audiobooks.|
-----------------------------------------------------------------------------------------------------

#####################################-CALIBRATION REQUIRED---####################################
-----------------------------------------------------------------------------------------------------
|   Note: Start a new tracking session.   |
-----------------------------------------------------------------------------------------------------

	Method 1: openaudible>Audible.java> find [line 522]
	Description:
	
	This method receives a string as a type of search parameter and then returns
	a List of books that match this search criteria.
	
	Specifically, the entire book catalog is called from another function, and then
	each individual book is parsed to its key values such as author, title, etc. and
	sees if any of these match the search criteria. If a match is found, it's added
	to the list.
	
	This method would be great for searching a library of ebooks.
	


	Rate your confidence in the description on a scale of 1-5: 5
	
	

-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 2: openaudible>desktop>swt>manager>AudibleGUI.java> connect [line 255]
	Description:

	The purpose of this method is to attempt a connection to the Audible GUI service.
	
	A new progress task object is created and the run method is overrided with a definition
	that will attempt the connection within a try-catch block and any connection errors will
	be handled.
	
	This method is needed to handle connection requests and handle when they fail so that the
	entire program does not crash.
	
	


	Rate your confidence in the description on a scale of 1-5: 4



-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 3: openaudible>util>DebugBuffer.java> accept [line 35]
	Description:
	
	This method accepts a string and appends it to a Stringbuffer.
	
	Inside the method, it checks whether the string passed in is null
	and or empty bytes, if it then a maximum amount + 500 bytes are allocated
	to the string and then appended to the Stringbuffer. If it isn't null
	then it is simply appended to the Stringbuffer as is.
	
	This section would be useful for processing text arguments in something
	like a search field to be able to parse out the key words that should be
	searched for.

	Rate your confidence in the description on a scale of 1-5: 4



-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 4: openaudible>books>Book.java> checkBook [line 101]
	Description:
	
	This method takes a book element and parses out its product ID and title and 
	checks if these exist within the object details.
	
	The book's product ID and title are fetched and then checked by member functions
	to ensure that they are not blank. If they are blank, it will generate an error
	message stating what field is missing, otherwise it returns an empty string
	indicating success.
	
	This method would be useful for checking if a book entry in the system has the
	required information necessary to catalog it into the inventory so that it can
	appear in search results.


	Rate your confidence in the description on a scale of 1-5: 3
	
	
	
-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session.	|
-----------------------------------------------------------------------------------------------------
#####################################-RE-CALIBRATION REQUIRED---####################################
-----------------------------------------------------------------------------------------------------
|   Note: Start a new tracking session. 	|
-----------------------------------------------------------------------------------------------------

	Method 5: openaudible>desktop>swt>manager>menu>CommandCenter.java> reallyQuit [line 260]
	Description:
	
	The purpose of this method is to generate a warning and confirm if a user really wants
	to quit the application.
	
	Inside the method a variable the number of tests in progress is set and if this number is
	greater than zero, an error message is assembled using this number to warn the user that
	if they quit they still have actions in progress that will be lost. Otherwise it returns
	true.
	
	This method is potentially overridden or overloaded by a child class to obtain the number
	of running processes and generate a useful error message. It is important for user satisfaction
	so that they are not losing work by accidentally click the exit button.


	Rate your confidence in the description on a scale of 1-5: 4
	
	
	
-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------


	Method 6: openaudible>util>Util.java> urlGetArgs [line 125]
	Description:
	
	The purpose of this method is to receive a URL as a string and parse out the arguments and return
	this as a hashmap of key value pairs.
	
	The inner method utilizes a try catch block to ensure it is a valid URL format and if this passes,
	then the correct arguments are parsed out and added to the map. If the URL is an improper format
	the runtime error is caught and a proper error message is displayed and the empty map is returned.
	
	This method is useful for deriving the arguments from the URL that is obtained from the specific
	API route that is interacted with. It will also handle broken links.


	Rate your confidence in the description on a scale of 1-5: 5
	
	
	
-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------



	Method 7: openaudible>convert>BookMerge.java> mergeItem [line 27]
	Description:
	
	This method checks if two books contain that same book element and returns the result as a boolean.
	
	The method receives two book objects and a book element and checks if that element exists within
	each book object. Then the method calls mergeItem to check if they are the same item and the result
	is returned from the method.
	
	This method would be useful for ensuring that books don't have duplicate entries within the catalog
	to potentially save on storage and improve search times.



	Rate your confidence in the description on a scale of 1-5: 3.5
	
	
	
-----------------------------------------------------------------------------------------------------
|   Note: You MUST stop tracking session and start a new one before moving on to the next method.   |
-----------------------------------------------------------------------------------------------------

	Method 8: openaudible>AudibleCLI.java> test [line 240]
	Description:
	
	This method receives a list of books and determines if they have audio recordings accompanying them.
	
	The method receives this list of books, and checks if each book has MP3 qualities, if this is true
	then the MPS information is fetched and displayed in the terminal.
	
	This method appears to be a test case to ensure that some of the search functionality within the 
	program as a whole is working properly before final release.
	



	Rate your confidence in the description on a scale of 1-5: 5
	
	
	

	
Congratulations, you have completed the project! Please remember to "Stop Tracking".

Please describe any issues you faced while completing tasks for this project:



Please call the administrator!
