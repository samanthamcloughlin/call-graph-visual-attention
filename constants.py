PROJECTS_DIR = "" # Projects Folder

DATA_DIR = "" # Data Folder

VALID_CALLEE_METHODS = [
    'Canvas:draw(Collection<Drawable>)', 
    'PipelineFilter:apply(ImmutableImage)', 
    'OrientationTools:reorient(ImmutableImage, ImageMetadata)', 
    'GifSequenceReader:readHeader()', 
    'AwtNearestNeighbourScale:scale(BufferedImage, int, int)', 
    'LinearSubpixelInterpolator:summands(double, double)', 
    'ImmutableImage:fill(Painter)', 
    'AwtImage:points()', 
    'Discretizer:computeBins(List<Element<Double>>, int)', 
    'InstancesSplitter:split(Instances, String, double...)', 
    'BinnedAttribute:parse(String)', 
    'OptimUtils:fitIntercept(double[], double[], double[])', 
    'TreeInteriorNode:write(PrintWriter)', 
    'InstancesReader:parseDenseInstance(String[], int)', 
    'RTreeLearner:getStats(Instances, double[])', 
    'SPLAMLearner:computeGradient(int[], double[][], double[], double[])', 
    'LinearRegression:predict(Instance)', 
    'CoordinateDescent:toString()', 
    'FeatureInducer:induceFeaturesFor(InstanceList, boolean, boolean)', 
    'InvertedIndex:InvertedIndex(InstanceList)', 
    'Multinomial:ensureCapacity(int)', 
    'SparseMatrixn:plusEquals(ConstantMatrix, double)', 
    'OrthantWiseLimitedMemoryBFGS:optimize(int)', 
    'GreedyAgglomerative:improveClustering(Clustering)', 
    'Audible:find(String)', 
    'DebugBuffer:accept(String)', 
    'Book:checkBook()', 
    'AudibleCLI:test(List<Book>)', 
    'CommandCenter:reallyQuit()', 
    'Util:urlGetArgs(String)', 
    'AudibleGUI:connect()', 
    'BookMerge:mergeItem(Book, Book, BookElement)', 
    'FlagTest:setColors()', 
    'Monarch:initializeCaches()', 
    'FreeColXMLReader:readId()', 
    'CostDeciders:getCost(Unit, Location, Location, int)', 
    'FreeColServer:changeServerState(ServerState)', 
    'CanvasMapViewer:drawRenderingTimeStrings(Graphics, final long, boolean)', 
    'SwingGUI:updateUnitPath()', 
    'FreeColObject:compareIds(FreeColObject, FreeColObject)'
              ]

VALID_CALLER_METHODS = [ 
    'Canvas:draw(Collection<Drawable>)', 
    'PipelineFilter:apply(ImmutableImage)', 
    'OrientationTools:reorient(ImmutableImage, ImageMetadata)', 
    'GifSequenceReader:readHeader()', 
    'AwtNearestNeighbourScale:scale(BufferedImage, int, int)', 
    'LinearSubpixelInterpolator:summands(double, double)', 
    'ImmutableImage:fill(Painter)', 
    'AwtImage:points()', 
    'Discretizer:computeBins(List<Element<Double>>, int)', 
    'InstancesSplitter:split(Instances, String, double...)', 
    'BinnedAttribute:parse(String)', 
    'OptimUtils:fitIntercept(double[], double[], double[])', 
    'TreeInteriorNode:write(PrintWriter)', 
    'InstancesReader:parseDenseInstance(String[], int)', 
    'RTreeLearner:getStats(Instances, double[])', 
    'SPLAMLearner:computeGradient(int[], double[][], double[], double[])', 
    'LinearRegression:predict(Instance)', 
    'CoordinateDescent:toString()', 
    'FeatureInducer:induceFeaturesFor(InstanceList, boolean, boolean)', 
    'InvertedIndex:InvertedIndex(InstanceList)', 
    'Multinomial:ensureCapacity(int)', 
    'SparseMatrixn:plusEquals(ConstantMatrix, double)', 
    'OrthantWiseLimitedMemoryBFGS:optimize(int)', 
    'GreedyAgglomerative:improveClustering(Clustering)', 
    'Audible:find(String)', 
    'DebugBuffer:accept(String)', 
    'Book:checkBook()', 
    'AudibleCLI:test(List<Book>)', 
    'CommandCenter:reallyQuit()', 
    'Util:urlGetArgs(String)', 
    'AudibleGUI:connect()', 
    'BookMerge:mergeItem(Book, Book, BookElement)', 
    'FlagTest:setColors()', 
    'Monarch:initializeCaches()', 
    'FreeColXMLReader:readId()', 
    'CostDeciders:getCost(Unit, Location, Location, int)', 
    'FreeColServer:changeServerState(ServerState)', 
    'CanvasMapViewer:drawRenderingTimeStrings(Graphics, final long, boolean)', 
    'SwingGUI:updateUnitPath()', 
    'FreeColObject:compareIds(FreeColObject, FreeColObject)'
]

ALL_METHODS = list(set([c.split(":")[1].split("(")[0] for c in VALID_CALLEE_METHODS] \
        + [c.split(":")[1].split("(")[0] for c in VALID_CALLER_METHODS]))
